/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface AAlert {
        /**
          * Set to true to make the alert closable.
         */
        "closable": boolean;
        /**
          * Hides the alert
         */
        "hide": () => Promise<void>;
        /**
          * Indicates whether or not the alert is open. You can use this in lieu of the show/hide methods.
         */
        "open": boolean;
        /**
          * Shows the alert.
         */
        "show": () => Promise<void>;
        /**
          * The type of alert.
         */
        "type": 'primary' | 'success' | 'info' | 'warning' | 'danger';
    }
    interface AAnimation {
        /**
          * Clears all KeyframeEffects caused by this animation and aborts its playback.
         */
        "cancel": () => Promise<void>;
        /**
          * The number of milliseconds to delay the start of the animation.
         */
        "delay": number;
        /**
          * Determines the direction of playback as well as the behavior when reaching the end of an iteration.
         */
        "direction": PlaybackDirection;
        /**
          * The number of milliseconds each iteration of the animation takes to complete.
         */
        "duration": number;
        /**
          * The rate of the animation's change over time.
         */
        "easing": string;
        /**
          * The number of milliseconds to delay after the active period of an animation sequence.
         */
        "endDelay": number;
        /**
          * Sets how the animation applies styles to its target before and after its execution.
         */
        "fill": FillMode;
        /**
          * Sets the playback time to the end of the animation corresponding to the current playback direction.
         */
        "finish": () => Promise<void>;
        /**
          * Gets a list of all supported animation names.
         */
        "getAnimationNames": () => Promise<void>;
        /**
          * Gets the current time of the animation in milliseconds.
         */
        "getCurrentTime": () => Promise<number>;
        /**
          * Gets a list of all supported easing function names.
         */
        "getEasingNames": () => Promise<void>;
        /**
          * The offset at which to start the animation, usually between 0 (start) and 1 (end).
         */
        "iterationStart": number;
        /**
          * The number of iterations to run before the animation completes. Defaults to `Infinity`, which loops.
         */
        "iterations": number;
        /**
          * The keyframes to use for the animation. If this is set, `name` will be ignored.
         */
        "keyframes": Keyframe[];
        /**
          * The name of the animation to use.
         */
        "name": string;
        /**
          * Pauses the animation. The animation will resume when this prop is removed.
         */
        "pause": boolean;
        /**
          * Sets the animation's playback rate. The default is `1`, which plays the animation at a normal speed. Setting this to `2`, for example, will double the animation's speed. A negative value can be used to reverse the animation. This value can be changed without causing the animation to restart.
         */
        "playbackRate": number;
        /**
          * Sets the current time of the animation in milliseconds.
         */
        "setCurrentTime": (time: number) => Promise<void>;
    }
    interface AAvatar {
        /**
          * Alternative text for the image.
         */
        "alt": string;
        /**
          * The image source to use for the avatar.
         */
        "image": string;
        /**
          * Initials to use as a fallback when no image is available (1-2 characters max recommended).
         */
        "initials": string;
        /**
          * The shape of the avatar.
         */
        "shape": 'circle' | 'square' | 'rounded';
    }
    interface ABadge {
        /**
          * Set to true to draw a pill-style badge with rounded edges.
         */
        "pill": boolean;
        /**
          * Set to true to make the badge pulsate to draw attention.
         */
        "pulse": boolean;
        /**
          * The badge's type.
         */
        "type": 'primary' | 'success' | 'info' | 'warning' | 'danger' | 'text';
    }
    interface AButton {
        /**
          * Set to true to draw the button with a caret for use with dropdowns, popovers, etc.
         */
        "caret": boolean;
        /**
          * Set to true to draw a circle button.
         */
        "circle": boolean;
        /**
          * Set to true to disable the button.
         */
        "disabled": boolean;
        /**
          * Tells the browser to download the linked file as this filename. Only used when `href` is set.
         */
        "download": string;
        /**
          * When set, the underlying button will be rendered as an `<a>` with this `href` instead of a `<button>`.
         */
        "href": string;
        /**
          * Set to true to draw the button in a loading state.
         */
        "loading": boolean;
        /**
          * An optional name for the button. Ignored when `href` is set.
         */
        "name": string;
        /**
          * Set to true to draw a pill-style button with rounded edges.
         */
        "pill": boolean;
        /**
          * Removes focus from the button.
         */
        "removeFocus": () => Promise<void>;
        /**
          * Sets focus on the button.
         */
        "setFocus": () => Promise<void>;
        /**
          * The button's size.
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * Indicates if activating the button should submit the form. Ignored when `href` is set.
         */
        "submit": boolean;
        /**
          * Tells the browser where to open the link. Only used when `href` is set.
         */
        "target": '_blank' | '_parent' | '_self' | '_top';
        /**
          * The button's type.
         */
        "type": | 'default'
    | 'primary'
    | 'success'
    | 'info'
    | 'warning'
    | 'danger'
    | 'text';
        /**
          * An optional value for the button. Ignored when `href` is set.
         */
        "value": string;
    }
    interface AButtonGroup {
        /**
          * A label to use for the button groups `aria-label` attribute.
         */
        "label": string;
    }
    interface ACard {
    }
    interface ACheckbox {
        /**
          * Set to true to draw the checkbox in a checked state.
         */
        "checked": boolean;
        /**
          * Set to true to disable the checkbox.
         */
        "disabled": boolean;
        /**
          * Set to true to draw the checkbox in an indeterminate state.
         */
        "indeterminate": boolean;
        /**
          * The checkbox's name attribute.
         */
        "name": string;
        /**
          * Removes focus from the checkbox.
         */
        "removeFocus": () => Promise<void>;
        /**
          * Sets focus on the checkbox.
         */
        "setFocus": () => Promise<void>;
        /**
          * The checkbox's value attribute.
         */
        "value": string;
    }
    interface ADetails {
        /**
          * Set to true to prevent the user from toggling the details.
         */
        "disabled": boolean;
        /**
          * Hides the alert
         */
        "hide": () => Promise<void>;
        /**
          * Indicates whether or not the details is open. You can use this in lieu of the show/hide methods.
         */
        "open": boolean;
        /**
          * Shows the alert.
         */
        "show": () => Promise<void>;
        /**
          * The summary to show in the details header. If you need to display HTML, use the `summary` slot instead.
         */
        "summary": string;
    }
    interface ADialog {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface ADrawer {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface ADropdown {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface AForm {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface AIcon {
        /**
          * An alternative description to use for accessibility. If omitted, the name or src will be used to generate it.
         */
        "label": string;
        /**
          * The name of the icon to draw.
         */
        "name": string;
        /**
          * An external URL of an SVG file.
         */
        "src": string;
    }
    interface AIconButton {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface AIconInput {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface AMenu {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface AMenuDivider {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface AMenuItem {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface AMenuLabel {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface AProgressBar {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface AProgressRing {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface ARadio {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface ARange {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface ARating {
        /**
          * Disables the rating.
         */
        "disabled": boolean;
        /**
          * A function that returns the symbols to display. Accepts an option `value` parameter you can use to map a specific symbol to a value.
         */
        "getSymbol": (value?: number) => string;
        /**
          * The highest rating to show.
         */
        "max": number;
        /**
          * The minimum increment value allowed by the control.
         */
        "precision": number;
        /**
          * Makes the rating readonly.
         */
        "readonly": boolean;
        /**
          * Removes focus from the rating.
         */
        "removeFocus": () => Promise<void>;
        /**
          * Sets focus on the rating.
         */
        "setFocus": () => Promise<void>;
        /**
          * The current rating.
         */
        "value": number;
    }
    interface ASelect {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface ASkeleton {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface ASpinner {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface ASwitch {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface ATab {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface ATabGroup {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface ATabPanel {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface ATag {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface ATextarea {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface ATooltip {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
}
declare global {
    interface HTMLAAlertElement extends Components.AAlert, HTMLStencilElement {
    }
    var HTMLAAlertElement: {
        prototype: HTMLAAlertElement;
        new (): HTMLAAlertElement;
    };
    interface HTMLAAnimationElement extends Components.AAnimation, HTMLStencilElement {
    }
    var HTMLAAnimationElement: {
        prototype: HTMLAAnimationElement;
        new (): HTMLAAnimationElement;
    };
    interface HTMLAAvatarElement extends Components.AAvatar, HTMLStencilElement {
    }
    var HTMLAAvatarElement: {
        prototype: HTMLAAvatarElement;
        new (): HTMLAAvatarElement;
    };
    interface HTMLABadgeElement extends Components.ABadge, HTMLStencilElement {
    }
    var HTMLABadgeElement: {
        prototype: HTMLABadgeElement;
        new (): HTMLABadgeElement;
    };
    interface HTMLAButtonElement extends Components.AButton, HTMLStencilElement {
    }
    var HTMLAButtonElement: {
        prototype: HTMLAButtonElement;
        new (): HTMLAButtonElement;
    };
    interface HTMLAButtonGroupElement extends Components.AButtonGroup, HTMLStencilElement {
    }
    var HTMLAButtonGroupElement: {
        prototype: HTMLAButtonGroupElement;
        new (): HTMLAButtonGroupElement;
    };
    interface HTMLACardElement extends Components.ACard, HTMLStencilElement {
    }
    var HTMLACardElement: {
        prototype: HTMLACardElement;
        new (): HTMLACardElement;
    };
    interface HTMLACheckboxElement extends Components.ACheckbox, HTMLStencilElement {
    }
    var HTMLACheckboxElement: {
        prototype: HTMLACheckboxElement;
        new (): HTMLACheckboxElement;
    };
    interface HTMLADetailsElement extends Components.ADetails, HTMLStencilElement {
    }
    var HTMLADetailsElement: {
        prototype: HTMLADetailsElement;
        new (): HTMLADetailsElement;
    };
    interface HTMLADialogElement extends Components.ADialog, HTMLStencilElement {
    }
    var HTMLADialogElement: {
        prototype: HTMLADialogElement;
        new (): HTMLADialogElement;
    };
    interface HTMLADrawerElement extends Components.ADrawer, HTMLStencilElement {
    }
    var HTMLADrawerElement: {
        prototype: HTMLADrawerElement;
        new (): HTMLADrawerElement;
    };
    interface HTMLADropdownElement extends Components.ADropdown, HTMLStencilElement {
    }
    var HTMLADropdownElement: {
        prototype: HTMLADropdownElement;
        new (): HTMLADropdownElement;
    };
    interface HTMLAFormElement extends Components.AForm, HTMLStencilElement {
    }
    var HTMLAFormElement: {
        prototype: HTMLAFormElement;
        new (): HTMLAFormElement;
    };
    interface HTMLAIconElement extends Components.AIcon, HTMLStencilElement {
    }
    var HTMLAIconElement: {
        prototype: HTMLAIconElement;
        new (): HTMLAIconElement;
    };
    interface HTMLAIconButtonElement extends Components.AIconButton, HTMLStencilElement {
    }
    var HTMLAIconButtonElement: {
        prototype: HTMLAIconButtonElement;
        new (): HTMLAIconButtonElement;
    };
    interface HTMLAIconInputElement extends Components.AIconInput, HTMLStencilElement {
    }
    var HTMLAIconInputElement: {
        prototype: HTMLAIconInputElement;
        new (): HTMLAIconInputElement;
    };
    interface HTMLAMenuElement extends Components.AMenu, HTMLStencilElement {
    }
    var HTMLAMenuElement: {
        prototype: HTMLAMenuElement;
        new (): HTMLAMenuElement;
    };
    interface HTMLAMenuDividerElement extends Components.AMenuDivider, HTMLStencilElement {
    }
    var HTMLAMenuDividerElement: {
        prototype: HTMLAMenuDividerElement;
        new (): HTMLAMenuDividerElement;
    };
    interface HTMLAMenuItemElement extends Components.AMenuItem, HTMLStencilElement {
    }
    var HTMLAMenuItemElement: {
        prototype: HTMLAMenuItemElement;
        new (): HTMLAMenuItemElement;
    };
    interface HTMLAMenuLabelElement extends Components.AMenuLabel, HTMLStencilElement {
    }
    var HTMLAMenuLabelElement: {
        prototype: HTMLAMenuLabelElement;
        new (): HTMLAMenuLabelElement;
    };
    interface HTMLAProgressBarElement extends Components.AProgressBar, HTMLStencilElement {
    }
    var HTMLAProgressBarElement: {
        prototype: HTMLAProgressBarElement;
        new (): HTMLAProgressBarElement;
    };
    interface HTMLAProgressRingElement extends Components.AProgressRing, HTMLStencilElement {
    }
    var HTMLAProgressRingElement: {
        prototype: HTMLAProgressRingElement;
        new (): HTMLAProgressRingElement;
    };
    interface HTMLARadioElement extends Components.ARadio, HTMLStencilElement {
    }
    var HTMLARadioElement: {
        prototype: HTMLARadioElement;
        new (): HTMLARadioElement;
    };
    interface HTMLARangeElement extends Components.ARange, HTMLStencilElement {
    }
    var HTMLARangeElement: {
        prototype: HTMLARangeElement;
        new (): HTMLARangeElement;
    };
    interface HTMLARatingElement extends Components.ARating, HTMLStencilElement {
    }
    var HTMLARatingElement: {
        prototype: HTMLARatingElement;
        new (): HTMLARatingElement;
    };
    interface HTMLASelectElement extends Components.ASelect, HTMLStencilElement {
    }
    var HTMLASelectElement: {
        prototype: HTMLASelectElement;
        new (): HTMLASelectElement;
    };
    interface HTMLASkeletonElement extends Components.ASkeleton, HTMLStencilElement {
    }
    var HTMLASkeletonElement: {
        prototype: HTMLASkeletonElement;
        new (): HTMLASkeletonElement;
    };
    interface HTMLASpinnerElement extends Components.ASpinner, HTMLStencilElement {
    }
    var HTMLASpinnerElement: {
        prototype: HTMLASpinnerElement;
        new (): HTMLASpinnerElement;
    };
    interface HTMLASwitchElement extends Components.ASwitch, HTMLStencilElement {
    }
    var HTMLASwitchElement: {
        prototype: HTMLASwitchElement;
        new (): HTMLASwitchElement;
    };
    interface HTMLATabElement extends Components.ATab, HTMLStencilElement {
    }
    var HTMLATabElement: {
        prototype: HTMLATabElement;
        new (): HTMLATabElement;
    };
    interface HTMLATabGroupElement extends Components.ATabGroup, HTMLStencilElement {
    }
    var HTMLATabGroupElement: {
        prototype: HTMLATabGroupElement;
        new (): HTMLATabGroupElement;
    };
    interface HTMLATabPanelElement extends Components.ATabPanel, HTMLStencilElement {
    }
    var HTMLATabPanelElement: {
        prototype: HTMLATabPanelElement;
        new (): HTMLATabPanelElement;
    };
    interface HTMLATagElement extends Components.ATag, HTMLStencilElement {
    }
    var HTMLATagElement: {
        prototype: HTMLATagElement;
        new (): HTMLATagElement;
    };
    interface HTMLATextareaElement extends Components.ATextarea, HTMLStencilElement {
    }
    var HTMLATextareaElement: {
        prototype: HTMLATextareaElement;
        new (): HTMLATextareaElement;
    };
    interface HTMLATooltipElement extends Components.ATooltip, HTMLStencilElement {
    }
    var HTMLATooltipElement: {
        prototype: HTMLATooltipElement;
        new (): HTMLATooltipElement;
    };
    interface HTMLElementTagNameMap {
        "a-alert": HTMLAAlertElement;
        "a-animation": HTMLAAnimationElement;
        "a-avatar": HTMLAAvatarElement;
        "a-badge": HTMLABadgeElement;
        "a-button": HTMLAButtonElement;
        "a-button-group": HTMLAButtonGroupElement;
        "a-card": HTMLACardElement;
        "a-checkbox": HTMLACheckboxElement;
        "a-details": HTMLADetailsElement;
        "a-dialog": HTMLADialogElement;
        "a-drawer": HTMLADrawerElement;
        "a-dropdown": HTMLADropdownElement;
        "a-form": HTMLAFormElement;
        "a-icon": HTMLAIconElement;
        "a-icon-button": HTMLAIconButtonElement;
        "a-icon-input": HTMLAIconInputElement;
        "a-menu": HTMLAMenuElement;
        "a-menu-divider": HTMLAMenuDividerElement;
        "a-menu-item": HTMLAMenuItemElement;
        "a-menu-label": HTMLAMenuLabelElement;
        "a-progress-bar": HTMLAProgressBarElement;
        "a-progress-ring": HTMLAProgressRingElement;
        "a-radio": HTMLARadioElement;
        "a-range": HTMLARangeElement;
        "a-rating": HTMLARatingElement;
        "a-select": HTMLASelectElement;
        "a-skeleton": HTMLASkeletonElement;
        "a-spinner": HTMLASpinnerElement;
        "a-switch": HTMLASwitchElement;
        "a-tab": HTMLATabElement;
        "a-tab-group": HTMLATabGroupElement;
        "a-tab-panel": HTMLATabPanelElement;
        "a-tag": HTMLATagElement;
        "a-textarea": HTMLATextareaElement;
        "a-tooltip": HTMLATooltipElement;
    }
}
declare namespace LocalJSX {
    interface AAlert {
        /**
          * Set to true to make the alert closable.
         */
        "closable"?: boolean;
        /**
          * Emitted after the alert closes and all transitions are complete.
         */
        "onSlAfterHide"?: (event: CustomEvent<any>) => void;
        /**
          * Emitted after the alert opens and all transitions are complete.
         */
        "onSlAfterShow"?: (event: CustomEvent<any>) => void;
        /**
          * Emitted when the alert closes. Calling `event.preventDefault()` will prevent it from being closed.
         */
        "onSlHide"?: (event: CustomEvent<any>) => void;
        /**
          * Emitted when the alert opens. Calling `event.preventDefault()` will prevent it from being opened.
         */
        "onSlShow"?: (event: CustomEvent<any>) => void;
        /**
          * Indicates whether or not the alert is open. You can use this in lieu of the show/hide methods.
         */
        "open"?: boolean;
        /**
          * The type of alert.
         */
        "type"?: 'primary' | 'success' | 'info' | 'warning' | 'danger';
    }
    interface AAnimation {
        /**
          * The number of milliseconds to delay the start of the animation.
         */
        "delay"?: number;
        /**
          * Determines the direction of playback as well as the behavior when reaching the end of an iteration.
         */
        "direction"?: PlaybackDirection;
        /**
          * The number of milliseconds each iteration of the animation takes to complete.
         */
        "duration"?: number;
        /**
          * The rate of the animation's change over time.
         */
        "easing"?: string;
        /**
          * The number of milliseconds to delay after the active period of an animation sequence.
         */
        "endDelay"?: number;
        /**
          * Sets how the animation applies styles to its target before and after its execution.
         */
        "fill"?: FillMode;
        /**
          * The offset at which to start the animation, usually between 0 (start) and 1 (end).
         */
        "iterationStart"?: number;
        /**
          * The number of iterations to run before the animation completes. Defaults to `Infinity`, which loops.
         */
        "iterations"?: number;
        /**
          * The keyframes to use for the animation. If this is set, `name` will be ignored.
         */
        "keyframes"?: Keyframe[];
        /**
          * The name of the animation to use.
         */
        "name"?: string;
        /**
          * Emitted when the animation is canceled.
         */
        "onACancel"?: (event: CustomEvent<any>) => void;
        /**
          * Emitted when the animation finishes.
         */
        "onAFinish"?: (event: CustomEvent<any>) => void;
        /**
          * Emitted when the animation starts or restarts.
         */
        "onAStart"?: (event: CustomEvent<any>) => void;
        /**
          * Pauses the animation. The animation will resume when this prop is removed.
         */
        "pause"?: boolean;
        /**
          * Sets the animation's playback rate. The default is `1`, which plays the animation at a normal speed. Setting this to `2`, for example, will double the animation's speed. A negative value can be used to reverse the animation. This value can be changed without causing the animation to restart.
         */
        "playbackRate"?: number;
    }
    interface AAvatar {
        /**
          * Alternative text for the image.
         */
        "alt"?: string;
        /**
          * The image source to use for the avatar.
         */
        "image"?: string;
        /**
          * Initials to use as a fallback when no image is available (1-2 characters max recommended).
         */
        "initials"?: string;
        /**
          * The shape of the avatar.
         */
        "shape"?: 'circle' | 'square' | 'rounded';
    }
    interface ABadge {
        /**
          * Set to true to draw a pill-style badge with rounded edges.
         */
        "pill"?: boolean;
        /**
          * Set to true to make the badge pulsate to draw attention.
         */
        "pulse"?: boolean;
        /**
          * The badge's type.
         */
        "type"?: 'primary' | 'success' | 'info' | 'warning' | 'danger' | 'text';
    }
    interface AButton {
        /**
          * Set to true to draw the button with a caret for use with dropdowns, popovers, etc.
         */
        "caret"?: boolean;
        /**
          * Set to true to draw a circle button.
         */
        "circle"?: boolean;
        /**
          * Set to true to disable the button.
         */
        "disabled"?: boolean;
        /**
          * Tells the browser to download the linked file as this filename. Only used when `href` is set.
         */
        "download"?: string;
        /**
          * When set, the underlying button will be rendered as an `<a>` with this `href` instead of a `<button>`.
         */
        "href"?: string;
        /**
          * Set to true to draw the button in a loading state.
         */
        "loading"?: boolean;
        /**
          * An optional name for the button. Ignored when `href` is set.
         */
        "name"?: string;
        /**
          * Emitted when the button loses focus.
         */
        "onSlBlur"?: (event: CustomEvent<any>) => void;
        /**
          * Emitted when the button gains focus.
         */
        "onSlFocus"?: (event: CustomEvent<any>) => void;
        /**
          * Set to true to draw a pill-style button with rounded edges.
         */
        "pill"?: boolean;
        /**
          * The button's size.
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * Indicates if activating the button should submit the form. Ignored when `href` is set.
         */
        "submit"?: boolean;
        /**
          * Tells the browser where to open the link. Only used when `href` is set.
         */
        "target"?: '_blank' | '_parent' | '_self' | '_top';
        /**
          * The button's type.
         */
        "type"?: | 'default'
    | 'primary'
    | 'success'
    | 'info'
    | 'warning'
    | 'danger'
    | 'text';
        /**
          * An optional value for the button. Ignored when `href` is set.
         */
        "value"?: string;
    }
    interface AButtonGroup {
        /**
          * A label to use for the button groups `aria-label` attribute.
         */
        "label"?: string;
    }
    interface ACard {
    }
    interface ACheckbox {
        /**
          * Set to true to draw the checkbox in a checked state.
         */
        "checked"?: boolean;
        /**
          * Set to true to disable the checkbox.
         */
        "disabled"?: boolean;
        /**
          * Set to true to draw the checkbox in an indeterminate state.
         */
        "indeterminate"?: boolean;
        /**
          * The checkbox's name attribute.
         */
        "name"?: string;
        /**
          * Emitted when the control loses focus.
         */
        "onSlBlur"?: (event: CustomEvent<any>) => void;
        /**
          * Emitted when the control's checked state changes.
         */
        "onSlChange"?: (event: CustomEvent<any>) => void;
        /**
          * Emitted when the control gains focus.
         */
        "onSlFocus"?: (event: CustomEvent<any>) => void;
        /**
          * The checkbox's value attribute.
         */
        "value"?: string;
    }
    interface ADetails {
        /**
          * Set to true to prevent the user from toggling the details.
         */
        "disabled"?: boolean;
        /**
          * Emitted after the details closes and all transitions are complete.
         */
        "onSlAfterHide"?: (event: CustomEvent<any>) => void;
        /**
          * Emitted after the details opens and all transitions are complete.
         */
        "onSlAfterShow"?: (event: CustomEvent<any>) => void;
        /**
          * Emitted when the details closes. Calling `event.preventDefault()` will prevent it from being closed.
         */
        "onSlHide"?: (event: CustomEvent<any>) => void;
        /**
          * Emitted when the details opens. Calling `event.preventDefault()` will prevent it from being opened.
         */
        "onSlShow"?: (event: CustomEvent<any>) => void;
        /**
          * Indicates whether or not the details is open. You can use this in lieu of the show/hide methods.
         */
        "open"?: boolean;
        /**
          * The summary to show in the details header. If you need to display HTML, use the `summary` slot instead.
         */
        "summary"?: string;
    }
    interface ADialog {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface ADrawer {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface ADropdown {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface AForm {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface AIcon {
        /**
          * An alternative description to use for accessibility. If omitted, the name or src will be used to generate it.
         */
        "label"?: string;
        /**
          * The name of the icon to draw.
         */
        "name"?: string;
        /**
          * Emitted when the icon failed to load.
         */
        "onAError"?: (event: CustomEvent<any>) => void;
        /**
          * Emitted when the icon has loaded.
         */
        "onALoad"?: (event: CustomEvent<any>) => void;
        /**
          * An external URL of an SVG file.
         */
        "src"?: string;
    }
    interface AIconButton {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface AIconInput {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface AMenu {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface AMenuDivider {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface AMenuItem {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface AMenuLabel {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface AProgressBar {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface AProgressRing {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface ARadio {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface ARange {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface ARating {
        /**
          * Disables the rating.
         */
        "disabled"?: boolean;
        /**
          * A function that returns the symbols to display. Accepts an option `value` parameter you can use to map a specific symbol to a value.
         */
        "getSymbol"?: (value?: number) => string;
        /**
          * The highest rating to show.
         */
        "max"?: number;
        /**
          * Emitted when the rating's value changes.
         */
        "onSlChange"?: (event: CustomEvent<any>) => void;
        /**
          * The minimum increment value allowed by the control.
         */
        "precision"?: number;
        /**
          * Makes the rating readonly.
         */
        "readonly"?: boolean;
        /**
          * The current rating.
         */
        "value"?: number;
    }
    interface ASelect {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface ASkeleton {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface ASpinner {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface ASwitch {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface ATab {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface ATabGroup {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface ATabPanel {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface ATag {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface ATextarea {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface ATooltip {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface IntrinsicElements {
        "a-alert": AAlert;
        "a-animation": AAnimation;
        "a-avatar": AAvatar;
        "a-badge": ABadge;
        "a-button": AButton;
        "a-button-group": AButtonGroup;
        "a-card": ACard;
        "a-checkbox": ACheckbox;
        "a-details": ADetails;
        "a-dialog": ADialog;
        "a-drawer": ADrawer;
        "a-dropdown": ADropdown;
        "a-form": AForm;
        "a-icon": AIcon;
        "a-icon-button": AIconButton;
        "a-icon-input": AIconInput;
        "a-menu": AMenu;
        "a-menu-divider": AMenuDivider;
        "a-menu-item": AMenuItem;
        "a-menu-label": AMenuLabel;
        "a-progress-bar": AProgressBar;
        "a-progress-ring": AProgressRing;
        "a-radio": ARadio;
        "a-range": ARange;
        "a-rating": ARating;
        "a-select": ASelect;
        "a-skeleton": ASkeleton;
        "a-spinner": ASpinner;
        "a-switch": ASwitch;
        "a-tab": ATab;
        "a-tab-group": ATabGroup;
        "a-tab-panel": ATabPanel;
        "a-tag": ATag;
        "a-textarea": ATextarea;
        "a-tooltip": ATooltip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "a-alert": LocalJSX.AAlert & JSXBase.HTMLAttributes<HTMLAAlertElement>;
            "a-animation": LocalJSX.AAnimation & JSXBase.HTMLAttributes<HTMLAAnimationElement>;
            "a-avatar": LocalJSX.AAvatar & JSXBase.HTMLAttributes<HTMLAAvatarElement>;
            "a-badge": LocalJSX.ABadge & JSXBase.HTMLAttributes<HTMLABadgeElement>;
            "a-button": LocalJSX.AButton & JSXBase.HTMLAttributes<HTMLAButtonElement>;
            "a-button-group": LocalJSX.AButtonGroup & JSXBase.HTMLAttributes<HTMLAButtonGroupElement>;
            "a-card": LocalJSX.ACard & JSXBase.HTMLAttributes<HTMLACardElement>;
            "a-checkbox": LocalJSX.ACheckbox & JSXBase.HTMLAttributes<HTMLACheckboxElement>;
            "a-details": LocalJSX.ADetails & JSXBase.HTMLAttributes<HTMLADetailsElement>;
            "a-dialog": LocalJSX.ADialog & JSXBase.HTMLAttributes<HTMLADialogElement>;
            "a-drawer": LocalJSX.ADrawer & JSXBase.HTMLAttributes<HTMLADrawerElement>;
            "a-dropdown": LocalJSX.ADropdown & JSXBase.HTMLAttributes<HTMLADropdownElement>;
            "a-form": LocalJSX.AForm & JSXBase.HTMLAttributes<HTMLAFormElement>;
            "a-icon": LocalJSX.AIcon & JSXBase.HTMLAttributes<HTMLAIconElement>;
            "a-icon-button": LocalJSX.AIconButton & JSXBase.HTMLAttributes<HTMLAIconButtonElement>;
            "a-icon-input": LocalJSX.AIconInput & JSXBase.HTMLAttributes<HTMLAIconInputElement>;
            "a-menu": LocalJSX.AMenu & JSXBase.HTMLAttributes<HTMLAMenuElement>;
            "a-menu-divider": LocalJSX.AMenuDivider & JSXBase.HTMLAttributes<HTMLAMenuDividerElement>;
            "a-menu-item": LocalJSX.AMenuItem & JSXBase.HTMLAttributes<HTMLAMenuItemElement>;
            "a-menu-label": LocalJSX.AMenuLabel & JSXBase.HTMLAttributes<HTMLAMenuLabelElement>;
            "a-progress-bar": LocalJSX.AProgressBar & JSXBase.HTMLAttributes<HTMLAProgressBarElement>;
            "a-progress-ring": LocalJSX.AProgressRing & JSXBase.HTMLAttributes<HTMLAProgressRingElement>;
            "a-radio": LocalJSX.ARadio & JSXBase.HTMLAttributes<HTMLARadioElement>;
            "a-range": LocalJSX.ARange & JSXBase.HTMLAttributes<HTMLARangeElement>;
            "a-rating": LocalJSX.ARating & JSXBase.HTMLAttributes<HTMLARatingElement>;
            "a-select": LocalJSX.ASelect & JSXBase.HTMLAttributes<HTMLASelectElement>;
            "a-skeleton": LocalJSX.ASkeleton & JSXBase.HTMLAttributes<HTMLASkeletonElement>;
            "a-spinner": LocalJSX.ASpinner & JSXBase.HTMLAttributes<HTMLASpinnerElement>;
            "a-switch": LocalJSX.ASwitch & JSXBase.HTMLAttributes<HTMLASwitchElement>;
            "a-tab": LocalJSX.ATab & JSXBase.HTMLAttributes<HTMLATabElement>;
            "a-tab-group": LocalJSX.ATabGroup & JSXBase.HTMLAttributes<HTMLATabGroupElement>;
            "a-tab-panel": LocalJSX.ATabPanel & JSXBase.HTMLAttributes<HTMLATabPanelElement>;
            "a-tag": LocalJSX.ATag & JSXBase.HTMLAttributes<HTMLATagElement>;
            "a-textarea": LocalJSX.ATextarea & JSXBase.HTMLAttributes<HTMLATextareaElement>;
            "a-tooltip": LocalJSX.ATooltip & JSXBase.HTMLAttributes<HTMLATooltipElement>;
        }
    }
}
